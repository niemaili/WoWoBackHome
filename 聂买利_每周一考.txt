1、cocos2dx使用了大量c++11的特性，简述c++11有哪些新特性 
  答：1、构造函数的改良，c++11运行构造函数调用其他构造函数
     2、构造函数继承，c++11允许派生类手动继承基类的构造函数，编译器可以使用基类的构造函数完成派生类的构造
     3、override判断父类中是否有这个虚函数
     4、指示字：final，用来避免类被继承，或是基类的函数被改写
     5、lambda表达式
     6、std:function,std:function对象是对c++中现有的可调用实体的一种类型安全的包裹（函数指针这类可调用实体，是类型不安全的）’
     7、std::bind,可以预先把指定可调用实体的某些参数绑定到已有的变量，产生一个新的可调用实体
     8、只能指针来管理内存

2、简述quick中是如何进行封装的
  答：class(classname, super)，classname是类名，super是父类或者创建对象实例的函数
ctor() 是类的构造函数,在调用类名.new()创建对象实例时会自动执行构造函数



3、简述背包实现过程
  答：1、左边一个listView，右边一个layer显示对应的module数据，点击左边listView的某一项，右边显示对应的这一项的数据。然后就可以对
4、使用骨骼动画怎么实现换装
   答：先获取到骨骼CCBone      然后创建CCSkin      添加到CCBone中，使用addDisplay



5、简述module实现过程，requière和import的区别
   答：module实现过程：module就是一个table，然后把这个table放到全局环境中去，所以就可以直接在别的类里面直接调用这个table里面的的成员和方法了，因为这个table已经放到全局环境中去了。
lua内部已经为我们封装了module的这种功能。  module(“名字”,package.seeall)


’  import()与require()功能相同，，都是载入一个模块，但具有一定程度的自动化特性
    require()命令，必须填写模块的绝对路径，

当在模块名前面有一个"." 时，import() 会从当前模块所在目录中查找其他模块。因此 MyClass 及其相关文件不管存放到什么目录里，我们都不再需要修改 MyClass 中的 import() 命令。这在开发一些重复使用的功能组件时，会非常方便。我们可以在模块名前添加多个"." ，这样 import() 会从更上层的目录开始查找模块。
不过 import() 只有在模块级别调用（也就是没有将 import() 写在任何函数中）时，才能够自动得到当前模块名。如果需要在函数中调用 import()，那么就需要指定当前模块名：
# 这里的 ... 是隐藏参数，包含了当前模块的名字，所以最好将这行代码写在模块的第一行
local CURRENT_MODULE_NAME = ...
local function testLoad()
    local MyClassBase = import(".MyClassBase", CURRENT_MODULE_NAME)
 



